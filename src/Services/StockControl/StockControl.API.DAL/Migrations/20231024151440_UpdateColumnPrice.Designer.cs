// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockControl.API.DAL.Context;

#nullable disable

namespace StockControl.API.DAL.Migrations
{
    [DbContext(typeof(StockControlDB))]
    [Migration("20231024151440_UpdateColumnPrice")]
    partial class UpdateColumnPrice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Service.Common.Entities.App.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Mnemo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mnemo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sources", "app");
                });

            modelBuilder.Entity("Service.Common.Entities.App.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<bool>("IsLockout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_lockout");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("source_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SourceId");

                    b.ToTable("users_info", "app");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Classifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Mnemo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mnemo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("classifiers", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Moving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("create_date");

                    b.Property<TimeSpan>("CreateTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 462, DateTimeKind.Unspecified).AddTicks(8132), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("nomenclature_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("number");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("party_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductFlowTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_flow_type_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasColumnOrder(8);

                    b.Property<Guid?>("SendingWarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sending_warehouse_id");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PartyId");

                    b.HasIndex("SendingWarehouseId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductFlowTypeId", "Number", "CreateDate", "CreateTime")
                        .IsUnique();

                    b.ToTable("movings", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Nomenclature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ClassifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("classifier_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 456, DateTimeKind.Unspecified).AddTicks(9988), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.HasKey("Id");

                    b.HasIndex("ClassifierId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("nomenclatures", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ClassifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("classifier_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 455, DateTimeKind.Unspecified).AddTicks(7554), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.HasKey("Id");

                    b.HasIndex("ClassifierId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("organizations", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Party", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("create_date");

                    b.Property<TimeSpan?>("CreateTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 470, DateTimeKind.Unspecified).AddTicks(6643), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<string>("ExtensionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("extension_number");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("number");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ExtensionNumber")
                        .IsUnique();

                    b.HasIndex("Number");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("parties", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.ProductFlowType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Mnemo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mnemo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("product_flow_types", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("create_date");

                    b.Property<TimeSpan>("CreateTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 459, DateTimeKind.Unspecified).AddTicks(5337), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("nomenclature_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("number");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("party_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductFlowTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_flow_type_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasColumnOrder(8);

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductFlowTypeId", "Number", "CreateDate", "CreateTime")
                        .IsUnique();

                    b.ToTable("receipts", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.StockAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 472, DateTimeKind.Unspecified).AddTicks(2594), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<Guid?>("MovingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("moving_id");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("nomenclature_id");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("party_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasColumnOrder(8);

                    b.Property<Guid?>("ReceiptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("receipt_id");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("warehouse_id");

                    b.Property<Guid?>("WriteOffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("write_off_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MovingId")
                        .IsUnique()
                        .HasFilter("[moving_id] IS NOT NULL");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PartyId");

                    b.HasIndex("ReceiptId")
                        .IsUnique()
                        .HasFilter("[receipt_id] IS NOT NULL");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WriteOffId")
                        .IsUnique()
                        .HasFilter("[write_off_id] IS NOT NULL");

                    b.ToTable("stock_availabilities", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ClassifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("classifier_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 458, DateTimeKind.Unspecified).AddTicks(2342), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.HasKey("Id");

                    b.HasIndex("ClassifierId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("warehouses", "stock");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.WriteOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("create_date");

                    b.Property<TimeSpan>("CreateTime")
                        .HasColumnType("time(0)")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 24, 19, 14, 40, 466, DateTimeKind.Unspecified).AddTicks(6335), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("nomenclature_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("number");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("party_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductFlowTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_flow_type_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasColumnOrder(8);

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<Guid?>("SendingWarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sending_warehouse_id");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PartyId");

                    b.HasIndex("SendingWarehouseId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductFlowTypeId", "Number", "CreateDate", "CreateTime")
                        .IsUnique();

                    b.ToTable("write_offs", "stock");
                });

            modelBuilder.Entity("Service.Common.Entities.App.UserInfo", b =>
                {
                    b.HasOne("Service.Common.Entities.App.Source", "Source")
                        .WithMany("UsersInfo")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Moving", b =>
                {
                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.ProductFlowType", "ProductFlowType")
                        .WithMany("Movings")
                        .HasForeignKey("ProductFlowTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Warehouse", "SendingWarehouse")
                        .WithMany()
                        .HasForeignKey("SendingWarehouseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Nomenclature");

                    b.Navigation("Organization");

                    b.Navigation("Party");

                    b.Navigation("ProductFlowType");

                    b.Navigation("SendingWarehouse");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Nomenclature", b =>
                {
                    b.HasOne("StockControl.API.Domain.Stock.Classifier", "Classifier")
                        .WithMany("Nomenclatures")
                        .HasForeignKey("ClassifierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Classifier");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Organization", b =>
                {
                    b.HasOne("StockControl.API.Domain.Stock.Classifier", "Classifier")
                        .WithMany("Organizations")
                        .HasForeignKey("ClassifierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Classifier");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Party", b =>
                {
                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Receipt", b =>
                {
                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Party", "Party")
                        .WithOne()
                        .HasForeignKey("StockControl.API.Domain.Stock.Receipt", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.ProductFlowType", "ProductFlowType")
                        .WithMany("Receipts")
                        .HasForeignKey("ProductFlowTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Nomenclature");

                    b.Navigation("Organization");

                    b.Navigation("Party");

                    b.Navigation("ProductFlowType");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.StockAvailability", b =>
                {
                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Moving", "Moving")
                        .WithOne()
                        .HasForeignKey("StockControl.API.Domain.Stock.StockAvailability", "MovingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Receipt", "Receipt")
                        .WithOne()
                        .HasForeignKey("StockControl.API.Domain.Stock.StockAvailability", "ReceiptId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.WriteOff", "WriteOff")
                        .WithOne()
                        .HasForeignKey("StockControl.API.Domain.Stock.StockAvailability", "WriteOffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Moving");

                    b.Navigation("Nomenclature");

                    b.Navigation("Organization");

                    b.Navigation("Party");

                    b.Navigation("Receipt");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("Warehouse");

                    b.Navigation("WriteOff");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Warehouse", b =>
                {
                    b.HasOne("StockControl.API.Domain.Stock.Classifier", "Classifier")
                        .WithMany("Warehouses")
                        .HasForeignKey("ClassifierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Classifier");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.WriteOff", b =>
                {
                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.ProductFlowType", "ProductFlowType")
                        .WithMany("WriteOffs")
                        .HasForeignKey("ProductFlowTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StockControl.API.Domain.Stock.Warehouse", "SendingWarehouse")
                        .WithMany()
                        .HasForeignKey("SendingWarehouseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StockControl.API.Domain.Stock.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Nomenclature");

                    b.Navigation("Organization");

                    b.Navigation("Party");

                    b.Navigation("ProductFlowType");

                    b.Navigation("SendingWarehouse");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Service.Common.Entities.App.Source", b =>
                {
                    b.Navigation("UsersInfo");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.Classifier", b =>
                {
                    b.Navigation("Nomenclatures");

                    b.Navigation("Organizations");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("StockControl.API.Domain.Stock.ProductFlowType", b =>
                {
                    b.Navigation("Movings");

                    b.Navigation("Receipts");

                    b.Navigation("WriteOffs");
                });
#pragma warning restore 612, 618
        }
    }
}
