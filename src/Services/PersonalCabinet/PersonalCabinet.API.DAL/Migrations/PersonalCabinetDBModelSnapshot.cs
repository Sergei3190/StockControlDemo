// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalCabinet.API.DAL.Context;

#nullable disable

namespace PersonalCabinet.API.DAL.Migrations
{
    [DbContext(typeof(PersonalCabinetDB))]
    partial class PersonalCabinetDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.HasKey("Id");

                    b.ToTable("cards", "person");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.LoadedDataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Mnemo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mnemo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("loaded_data_types", "person");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.PersonDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("card_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 4, 15, 44, 28, 973, DateTimeKind.Unspecified).AddTicks(8379), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<Guid>("LoadedDataTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("loaded_data_type_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LoadedDataTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("documents", "person");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.PersonPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("card_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 4, 15, 44, 28, 972, DateTimeKind.Unspecified).AddTicks(5080), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<Guid>("LoadedDataTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("loaded_data_type_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LoadedDataTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("photos", "person");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.UserPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("card_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 10, 4, 15, 44, 28, 970, DateTimeKind.Unspecified).AddTicks(2289), new TimeSpan(0, 4, 0, 0, 0)))
                        .HasColumnName("_created");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_deleted_by");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_deleted");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("_updated_by");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("_updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("persons", "person");
                });

            modelBuilder.Entity("Service.Common.Entities.App.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Mnemo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mnemo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sources", "app");
                });

            modelBuilder.Entity("Service.Common.Entities.App.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<bool>("IsLockout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_lockout");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("source_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SourceId");

                    b.ToTable("users_info", "app");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.PersonDocument", b =>
                {
                    b.HasOne("PersonalCabinet.API.Domain.Person.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalCabinet.API.Domain.Person.LoadedDataType", "LoadedDataType")
                        .WithMany("Documents")
                        .HasForeignKey("LoadedDataTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Card");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LoadedDataType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.PersonPhoto", b =>
                {
                    b.HasOne("PersonalCabinet.API.Domain.Person.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalCabinet.API.Domain.Person.LoadedDataType", "LoadedDataType")
                        .WithMany("Photos")
                        .HasForeignKey("LoadedDataTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Card");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LoadedDataType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.UserPerson", b =>
                {
                    b.HasOne("PersonalCabinet.API.Domain.Person.Card", "Card")
                        .WithOne()
                        .HasForeignKey("PersonalCabinet.API.Domain.Person.UserPerson", "CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Service.Common.Entities.App.UserInfo", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Service.Common.Entities.App.UserInfo", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Service.Common.Entities.App.UserInfo", b =>
                {
                    b.HasOne("Service.Common.Entities.App.Source", "Source")
                        .WithMany("UsersInfo")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("PersonalCabinet.API.Domain.Person.LoadedDataType", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Service.Common.Entities.App.Source", b =>
                {
                    b.Navigation("UsersInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
