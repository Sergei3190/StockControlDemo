// gRPC представляет фреймворк, который использует протокол RPC (Remote Procedure Call) для обмена сообщениями между клиентом и сервером.
// Цель фреймворка состоит в том, чтобы обеспечить высокую производительность в тех условиях, 
// где это особенно критично, например, при интенсивном обмене информацией в режиме реального времени.

// определяет тип используемого синтаксиса
syntax = "proto3";

// пространство имен, которое будет использоваться с этим сервисом
option csharp_namespace = "GrpcNote";

// название пакета
package NoteApi;

// для работы с null типами
import "google/protobuf/wrappers.proto";

// Каждому полю в сообщении присваивается уникальное число. 
// Эти значения позволяют идентифицировать непосредственные значения полей в бинарном формате при кодировании и получении сообщений.

// сообщение от клиента
message NoteArrayRequest {
	// repeated обозначает коллекцию указанных типов
    repeated NoteArrayItemRequest items = 1;
}

// сообщение клиенту
message NoteArrayResponse {
	bool flag = 1;
}

message NoteArrayItemRequest {
	// Protobuf не поддерживает напрямую тип Guid , известный UUIDна других платформах. Для него нет известного типа.
    // Лучший подход — обрабатывать Guidзначения как stringполя,
	string id = 1;
	string content = 2;
	bool isFix = 3;
	int32 sort = 4;
	google.protobuf.StringValue executionDate = 5;
}

// определение сервиса сервера
service Note {
	// указываем имя метода сервиса grpc с типом входных данных, и возвращаемое значение
	rpc UpdateSort(NoteArrayRequest) returns (NoteArrayResponse) {}
}

// Автоматически сгенерированные файлы находятся в папке obj\Debug\net7.0\Protos 